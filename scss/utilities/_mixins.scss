
// BEM Selector

@mixin e($element) {
  &__#{$element} {
    @content;
  }
}

// Button Mixin

@mixin colors($map) {
  @each $theme, $color in $map {
    &--#{$theme}.theme__colors {
      background-color: $color;
    }
  }
}

// Media Queries

@mixin mq($break) {
  @if $break == 'small' {
    @media (min-width: $brkpoint-sm) and (max-width: $brkpoint-md) {
      @content;
    }
  }
  @else if $break == 'medium' {
    @media (min-width: $brkpoint-md) {
      @content;
    }
  }
  @else if $break == 'large' {
    @media (min-width: $brkpoint-lg) {
      @content;
    }
  }
  @else {
    @error "Whoops! No value could be retrieved for `#{$break}`.";
  }
}

// Flexbox Mixin

@mixin flex ($just-cont: null, $direct: null) {
  display: flex;
  justify-content: $just-cont;
  flex-direction: $direct;
}

// Grid

@mixin g-columns {
  @for $i from 1 through $g-col-count {
    $context: g-context($g-col-width, $g-col-count ,$g-gutter-width) !global;
    $target: ($g-col-width * $i) + ($g-gutter-width * ($i - 1));

    // Generate column modifier classes
    &--#{$i} {
      width: percentage($target / $context);
    }
  }
}

// Set the "context" width for the grid (function)

@function g-context($g-col-width, $g-col-count ,$g-gutter-width) {
  $g-context: ($g-col-width * $g-col-count) + ($g-gutter-width * ($g-col-count - 1));
  @return $g-context;
}
